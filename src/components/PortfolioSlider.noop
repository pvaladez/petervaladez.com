import React, { useRef } from 'react';
import clamp from 'lodash-es/clamp';
import { useSprings, animated } from 'react-spring';
import { useDrag } from 'react-use-gesture';
import styles from '../styles/components/portfolioSlider.module.scss';

const pages = [
  'https://images.pexels.com/photos/62689/pexels-photo-62689.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
  'https://images.pexels.com/photos/296878/pexels-photo-296878.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
  'https://images.pexels.com/photos/351265/pexels-photo-351265.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
  'https://images.pexels.com/photos/924675/pexels-photo-924675.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
];

export default function PortfolioSlider() {
  const index = useRef(null);
  const wrapRef = useRef(null);
  const wrapWidth = useRef(null);
  const slideRef = useRef(null);

  function useSliderSprings(width) {
    const [springs, set] = useSprings(pages.length, (i) => ({
      x: () => i * width,
      scale: 1,
      display: 'block',
    }));

    return [springs, set];
  }

  const sliderSprings = useSliderSprings(width);

  React.useEffect(() => {
    wrapWidth = wrapRef.current.getBoundingClientRect().width;

    const slides = springs.map(({ x, display, scale }, i) => (
      <animated.div
        // eslint-disable-next-line react/jsx-props-no-spreading
        {...bind()}
        // eslint-disable-next-line react/no-array-index-key
        key={i}
        className={styles.sliderContainer}
        // eslint-disable-next-line no-shadow
        style={{ display, transform: x.interpolate((x) => `translate3d(${x}px,0,0)`) }}
      >
        <animated.div
          className={styles.slide}
          ref={slideRef}
          style={{
            transform: scale.interpolate((sc) => `scale(${sc})`),
            backgroundImage: `url(${pages[i]})`,
          }}
        />
      </animated.div>
    ));

    wrapRef.current.append(slides);
  }, []);

  const bind = useDrag(({
    down, movement: [mx], direction: [xDir], distance, cancel,
  }) => {
    if (down && distance > slideRef.current.getBoundingClientRect().width / 2) {
      cancel((index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, pages.length - 1)));
    }
    set((i) => {
      if (i < index.current - 1 || i > index.current + 1) return { display: 'none' };
      // eslint-disable-next-line max-len
      const x = (i - index.current) * slideRef.current.getBoundingClientRect().width + (down ? mx : 0);
      const scale = down ? 1 - distance / slideRef.current.getBoundingClientRect().width / 2 : 1;
      return { x, scale, display: 'block' };
    });
  });

  /* const slides = springs.map(({ x, display, scale }, i) => (
    <animated.div
      // eslint-disable-next-line react/jsx-props-no-spreading
      {...bind()}
      // eslint-disable-next-line react/no-array-index-key
      key={i}
      className={styles.sliderContainer}
      // eslint-disable-next-line no-shadow
      style={{ display, transform: x.interpolate((x) => `translate3d(${x}px,0,0)`) }}
    >
      <animated.div
        className={styles.slide}
        ref={slideRef}
        style={{ transform: scale.interpolate((sc) => `scale(${sc})`), backgroundImage: `url(${pages[i]})` }}
      />
    </animated.div>
  )); */

  return <div className={styles.sliderWrapper} ref={wrapRef} />;
}
